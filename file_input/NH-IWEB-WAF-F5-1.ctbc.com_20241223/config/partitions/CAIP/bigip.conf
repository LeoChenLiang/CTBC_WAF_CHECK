#TMSH-VERSION: 17.1.1.3

apm client-packaging /CAIP/client-packaging { }
apm resource sandbox /CAIP/citrix-client-package {
    base-uri /CAIP/public/citrix
    description "Sandbox for Citrix client package files"
}
apm resource sandbox /CAIP/hosted-content {
    base-uri /CAIP/public/share
    description "Sandbox for static contents"
}
ltm node /CAIP/10.24.64.181 {
    address 10.24.64.181
}
ltm pool /CAIP/POOL_CAIP_Web_AP {
    members {
        /CAIP/10.24.64.181:8086 {
            address 10.24.64.181
        }
    }
    monitor /Common/CAIP_MON_HTTP_HTTPS
}
ltm rule /CAIP/iRule_CAIP_LB_FAILED {
when RULE_INIT {
           set static::ma_content_caip "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><style></style></head><body lang=ZH-TW style='text-justify-trim:punctuation'><p><b><u>&#37325;&#35201;&#20844;&#21578;</u></b></p><p>&#38468;&#21152;&#21151;&#33021; &#30446;&#21069;&#27491;&#36914;&#34892;&#31995;&#32113;&#26356;&#26032;&#20013;&#65292;&#36896;&#25104;&#19981;&#20415;&#65292;&#25964;&#35531;&#35211;&#35538;!</p><p>&nbsp;</p><p>CAIP &#25964;&#21855;</p><p>&nbsp;</p><p><b><u>Important Notice</u></b></p><p>In order to provide better service, CAIP system is currently being updated.</p><p>We apologize for any inconvenience this may cause.</p><p>Your patience is very much appreciated.</p><p>&nbsp;</p><p>CTBC Bank CO., Ltd.</p></</body></html>"
}

when HTTP_REQUEST {

           if { [active_members [LB::server pool]] == 0 } {
                     HTTP::respond 200 content $static::ma_content
           }
}
}
ltm rule /CAIP/iRule_CAIP_REMOVE_HEADER {
when HTTP_RESPONSE {
    HTTP::header remove Server

    foreach header_name [HTTP::header names] {

       #&#31995;&#32113;&#20659;&#36664;&#25935;&#24863;&#38913;&#38754;&#20659;&#36664;&#30340;&#23553;&#21253;&#26410;&#27491;&#30906;&#35373;&#23450;Cache-control&#23660;&#24615;
       if {[string match -nocase Cache-* $header_name]}{ 
           HTTP::header remove $header_name

       }
       if {[string match -nocase Pragma* $header_name]}{ 
           HTTP::header remove $header_name

       }
       if {[string match -nocase Expires* $header_name]}{ 
           HTTP::header remove $header_name
       }

       #X-Frame-Options
       #&#20027;&#27231;&#23553;&#21253;&#27161;&#38957;&#36039;&#35338;&#27945;&#28431;&#20027;&#27231;&#12289;&#22871;&#20214;&#29256;&#26412; X-Powered-By
       #X-&#38283;&#38957;&#30340;&#37117;&#26371;&#34987;&#31227;&#25481;
       if {[string match -nocase X-* $header_name]}{

           HTTP::header remove $header_name
       }
    }

    HTTP::header insert "Cache-Control" "no-cache, no-store, must-revalidate, max-age=0"
    HTTP::header insert "Cache-Control" "post-check=0, pre-check=0"

    HTTP::header insert "Pragma" "no-cache"

    HTTP::header insert "Expires" "0" 

    HTTP::header insert "X-Frame-Options" "SAMEORIGIN"


    #&#32178;&#31449;&#30340;&#23553;&#21253;&#27161;&#38957;&#23660;&#24615;&#32570;&#23569;X-Content-Type-Options
    if {![HTTP::header exists "X-Content-Type-Options"] } { 
       HTTP::header insert "X-Content-Type-Options" "nosniff" 
    }
    if {![HTTP::header exists "X-XSS-Protection"] } { 
        HTTP::header insert "X-XSS-Protection" "1; mode=block" 
    } 
}
}
ltm rule /CAIP/iRule_CAIP_SETCookie {
when HTTP_RESPONSE {
   HTTP::header insert "X-FRAME-OPTIONS" "SAMEORIGIN"

   set allcookie [HTTP::header values "Set-Cookie"]
   HTTP::header remove "Set-Cookie"

   foreach thecookie $allcookie {
      if {$thecookie starts_with "ASP.NET_SessionId"} {
         HTTP::header insert "Set-Cookie" "${thecookie};secure; HttpOnly"
      } else {
         HTTP::header insert "Set-Cookie" "$thecookie"
      }
   }
}

when HTTP_REQUEST {
# Insert a cookie named CUSTOMER_IP with the client IP address as a value
HTTP::cookie insert name CUSTOMER_IP value [IP::client_addr] 
}
}
ltm profile client-ssl /CAIP/CAIP_SSL_P {
    app-service none
    cert /Common/CAIP_SSL_2021.crt
    cert-key-chain {
        CAIP_SSL_2021_TWCA_EV_uca2 {
            cert /Common/CAIP_SSL_2021.crt
            chain /Common/TWCA_EV_uca2.crt
            key /Common/CAIP_SSL_2021.key
        }
    }
    chain /Common/TWCA_EV_uca2.crt
    cipher-group none
    ciphers ECDHE:!3DES:!SHA1:!CHACHA20-POLY1305
    defaults-from /Common/clientssl
    inherit-ca-certkeychain true
    inherit-certkeychain false
    key /Common/CAIP_SSL_2021.key
    options { dont-insert-empty-fragments no-tlsv1.3 no-tlsv1.1 no-sslv3 no-tlsv1 }
    passphrase none
    renegotiate-max-record-delay 10
    renegotiate-size 1000mb
}
