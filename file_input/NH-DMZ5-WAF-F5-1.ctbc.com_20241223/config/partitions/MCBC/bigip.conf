#TMSH-VERSION: 17.1.1.3

asm policy /MCBC/SP_MCBC {
    active
    encoding utf-8
}
ltm node /MCBC/10.243.137.248 {
    address 10.243.137.248
}
ltm node /MCBC/10.243.137.249 {
    address 10.243.137.249
}
ltm node /MCBC/10.243.137.250 {
    address 10.243.137.250
}
ltm node /MCBC/10.243.137.251 {
    address 10.243.137.251
}
ltm node /MCBC/10.243.137.252 {
    address 10.243.137.252
}
ltm node /MCBC/10.243.137.253 {
    address 10.243.137.253
}
ltm node /MCBC/10.248.29.187 {
    address 10.248.29.187
}
ltm node /MCBC/10.248.29.188 {
    address 10.248.29.188
}
ltm node /MCBC/mcbc-op-login-apicast-production.apps.scp01.ctbcbank.com {
    fqdn {
        address-family all
        name mcbc-op-login-apicast-production.apps.scp01.ctbcbank.com
    }
}
ltm node /MCBC/mcbc-op-nonlogin-apicast-production.apps.scp01.ctbcbank.com {
    fqdn {
        address-family all
        name mcbc-op-nonlogin-apicast-production.apps.scp01.ctbcbank.com
    }
}
ltm node /MCBC/mcbc-platform-apicast-production.apps.scp01.ctbcbank.com {
    fqdn {
        address-family all
        name mcbc-platform-apicast-production.apps.scp01.ctbcbank.com
    }
}
ltm policy /MCBC/asm_auto_l7_policy__VS_MCBC_EXT {
    controls { asm }
    requires { http }
    rules {
        default {
            actions {
                1 {
                    asm
                    enable
                    policy /MCBC/SP_MCBC
                }
            }
            ordinal 1
        }
    }
    strategy /Common/first-match
}
ltm pool /MCBC/POOL_MCBC_API {
    members {
        /MCBC/10.243.137.250:80 {
            address 10.243.137.250
        }
        /MCBC/10.243.137.251:80 {
            address 10.243.137.251
        }
    }
    monitor /Common/tcp
}
ltm pool /MCBC/POOL_MCBC_GATEWAY {
    members {
        /MCBC/10.243.137.248:8080 {
            address 10.243.137.248
        }
        /MCBC/10.243.137.249:8080 {
            address 10.243.137.249
        }
    }
    monitor /Common/tcp
}
ltm pool /MCBC/POOL_MCBC_GBM_GATEWAY_8080 {
    members {
        /MCBC/10.248.29.187:8080 {
            address 10.248.29.187
            session user-disabled
        }
        /MCBC/10.248.29.188:8080 {
            address 10.248.29.188
            session user-disabled
        }
    }
    monitor /Common/tcp
}
ltm pool /MCBC/POOL_MCBC_LANDING {
    members {
        /MCBC/10.243.137.250:82 {
            address 10.243.137.250
        }
        /MCBC/10.243.137.251:82 {
            address 10.243.137.251
        }
    }
    monitor /Common/tcp
}
ltm pool /MCBC/POOL_MCBC_OP {
    members {
        /MCBC/10.243.137.252:80 {
            address 10.243.137.252
            session user-disabled
            state user-down
        }
        /MCBC/10.243.137.253:80 {
            address 10.243.137.253
        }
    }
    monitor /Common/tcp
}
ltm pool /MCBC/POOL_MCBC_OP_LOGIN {
    members {
        /MCBC/mcbc-op-login-apicast-production.apps.scp01.ctbcbank.com:80 {
            fqdn {
                name mcbc-op-login-apicast-production.apps.scp01.ctbcbank.com
            }
        }
    }
    monitor /Common/tcp
}
ltm pool /MCBC/POOL_MCBC_OP_NONLOGIN {
    members {
        /MCBC/mcbc-op-nonlogin-apicast-production.apps.scp01.ctbcbank.com:80 {
            fqdn {
                name mcbc-op-nonlogin-apicast-production.apps.scp01.ctbcbank.com
            }
        }
    }
    monitor /Common/tcp
}
ltm pool /MCBC/POOL_MCBC_PLATFORM {
    members {
        /MCBC/mcbc-platform-apicast-production.apps.scp01.ctbcbank.com:80 {
            fqdn {
                name mcbc-platform-apicast-production.apps.scp01.ctbcbank.com
            }
        }
    }
    monitor /Common/tcp
}
ltm rule /MCBC/iRule_MCBC_HTTP_HTTPS {
when HTTP_REQUEST {
    if { [HTTP::method] equals "OPTIONS" }
    {
        HTTP::respond 405 content "Method Not Allow"
        return
    }
    if { [HTTP::uri] starts_with "/msp" }
     {
         pool /MCBC/POOL_MCBC_GATEWAY
            #-- &#26412;iRule&#31105;&#27490;&#21152;&#20837;/op&#30456;&#38364;&#26381;&#21209; --###
     }
     elseif { [HTTP::uri] starts_with "/content" }
     {
        if { [HTTP::uri] equals "/content" } {
            set uri [string map -nocase {"content" "content/"} [HTTP::uri]]
            HTTP::uri $uri
        }
        snatpool SNAT_MCBC
        pool POOL_MCBC_API
     }
     elseif { [HTTP::uri] starts_with "/LandingPage/" }
     {
         snatpool SNAT_MCBC
         pool POOL_MCBC_LANDING
     }
     elseif { [HTTP::uri] starts_with "/mcbc/platform/open/" }
     {
         HTTP::header insert Authorization "Basic NzRmOTVjYmI6MGY4NWE1Y2IyYTQwYTU2Mzk0OTBjZTIzNWIxODE4NWQ="
         snatpool SNAT_MCBC
         pool POOL_MCBC_PLATFORM
     }
     else
    {
        HTTP::respond 404 content {
            <html>
                <head>
                </head>
                <body>
                    &#24456;&#25265;&#27465;&#65292;&#36039;&#28304;&#19981;&#23384;&#22312;&#12290;
                </body>
            </html>
        }
    }
}

when HTTP_RESPONSE {
      if { !([ HTTP::header exists "Content-Security-Policy" ])} { 
          #HTTP::header insert "Content-Security-Policy" "frame-ancestors 'none'; default-src https://*.ctbcbusiness.com; script-src 'unsafe-eval' 'unsafe-inline' https://*.ctbcbusiness.com; connect-src data: 'unsafe-inline' https://*.ctbcbusiness.com; img-src * data: blob: 'unsafe-inline'; frame-src *; style-src 'unsafe-inline' https://*.ctbcbusiness.com; font-src * 'unsafe-inline';"
          HTTP::header insert "Content-Security-Policy" "frame-ancestors 'self';default-src https://*.ctbcbusiness.com ; script-src 'unsafe-eval' 'unsafe-inline' https://*.ctbcbusiness.com https://www.youtube.com; connect-src data: 'unsafe-inline' https://*.ctbcbusiness.com;img-src https://*.ctbcbusiness.com https://i.ytimg.com data: blob: 'unsafe-inline'; frame-src https://*.ctbcbusiness.com https://www.youtube-nocookie.com;style-src 'unsafe-inline' https://*.ctbcbusiness.com;font-src https://*.ctbcbusiness.com https://fonts.gstatic.com 'unsafe-inline';"
          }
      if {!([HTTP::header exists "X-Frame-Options"])} {
          HTTP::header insert "X-Frame-Options" "SAMEORIGIN"
          }
      if {!([HTTP::header exists "Permissions-Policy"])} {
          HTTP::header insert "Permissions-Policy" "geolocation=(self https://*.ctbcbusiness.com), microphone=()"
          }
      if { !([ HTTP::header exists "X-XSS-Protection" ])} {
          HTTP::header insert "X-XSS-Protection" "1; mode=block"  
          }     
      if { !([ HTTP::header exists "X-Content-Type-Options" ])} {
          HTTP::header insert "X-Content-Type-Options" "nosniff"  
          }    
      if { !([ HTTP::header exists "Cache-Control" ])} {
          #HTTP::header insert "Cache-Control" "private  no-store"
          HTTP::header insert "Cache-Control" "no-store, max-age=0"
          } 
      if { !([ HTTP::header exists "Strict-Transport-Security" ])} {
          HTTP::header insert "Strict-Transport-Security" "max-age=31536000;includeSubDomains"  
          } 
      if { !([ HTTP::header exists "Referrer-Policy" ])} {
          #HTTP::header insert Referrer-Policy "no-referrer-when-downgrade"
          HTTP::header insert Referrer-Policy "strict-origin-when-cross-origin"
          }
      if { ([ HTTP::header exists "Set-Cookie" ]) } {
          set cookies [HTTP::header values "Set-Cookie"]
          HTTP::header remove "Set-Cookie"
          foreach acookie $cookies {
             HTTP::header insert "Set-Cookie" "${acookie}; Secure; HttpOnly; SameSite=Lax;"
          }
      }
      if { ([HTTP::status] == 400 || [HTTP::status] == 404 || [HTTP::status] starts_with "5") } {
          HTTP::respond 500 content {
            <html>
                <head>
                </head>
                <body>
                    &#24456;&#25265;&#27465;&#65292;&#36039;&#28304;&#19981;&#23384;&#22312;&#25110;&#31995;&#32113;&#30332;&#29983;&#37679;&#35492;&#65292;&#35531;&#31245;&#20505;&#20877;&#35430;&#12290;
                </body>
            </html>
          }
      }
}
}
ltm rule /MCBC/iRule_MCBC_HTTP_HTTPS_OP {
when HTTP_REQUEST {
    if { [HTTP::method] equals "OPTIONS" }
    {
        HTTP::respond 405 content "Method Not Allow"
        return
    }
    if { [HTTP::uri] equals "/assets" }
     {
        set uri [string map -nocase {"assets" "assets/"} [HTTP::uri]]
        HTTP::uri $uri
        snatpool SNAT_MCBC
        pool POOL_MCBC_OP
     }
     elseif { [HTTP::uri] starts_with "/content" }
     {
        if { [HTTP::uri] equals "/content" } {
            set uri [string map -nocase {"content" "content/"} [HTTP::uri]]
            HTTP::uri $uri
        }
        snatpool SNAT_MCBC
        pool POOL_MCBC_API
     }
     elseif { [HTTP::uri] starts_with "/LandingPage/" }
     {
            snatpool SNAT_MCBC
            pool POOL_MCBC_LANDING
     }
     elseif { [HTTP::uri] starts_with "/mcbc/op/nonlogin/" } 
     {
            HTTP::header insert Authorization "Basic YjBiZGNmMGI6NWU3MTk2NzEyMDk3ZGYxYzMzOTcyOTQyNTczMTQxYzg="
            snatpool SNAT_MCBC
            pool POOL_MCBC_OP_NONLOGIN
            #-- &#26412;&#27573;&#28858;op&#30456;&#38364;&#26381;&#21209;&#35215;&#21063;&#20677;&#20839;&#37096;&#20351;&#29992;&#65292;&#22196;&#31105;&#31227;&#36681;&#33267;&#22806;&#37096;iRule&#20351;&#29992; --###
     }
     elseif { [HTTP::uri] starts_with "/mcbc/op/login/" }
     {
           if { [HTTP::cookie exists "token"] } {
               set token [HTTP::cookie "token"] 
               HTTP::header insert Authorization "Bearer $token"
           }
           snatpool SNAT_MCBC
           pool POOL_MCBC_OP_LOGIN
     }
     elseif { [HTTP::uri] starts_with "/mcbc/platform/open/" }
     {
         HTTP::header insert Authorization "Basic NzRmOTVjYmI6MGY4NWE1Y2IyYTQwYTU2Mzk0OTBjZTIzNWIxODE4NWQ="
         snatpool SNAT_MCBC
         pool POOL_MCBC_PLATFORM
     }
     else
     {
           snatpool SNAT_MCBC
           pool POOL_MCBC_OP
            #-- &#26412;&#27573;&#28858;op&#30456;&#38364;&#26381;&#21209;&#35215;&#21063;&#20677;&#20839;&#37096;&#20351;&#29992;&#65292;&#22196;&#31105;&#31227;&#36681;&#33267;&#22806;&#37096;iRule&#20351;&#29992; --###
     }
}

when HTTP_RESPONSE {
      if { !([ HTTP::header exists "Content-Security-Policy" ])} { 
          #HTTP::header insert "Content-Security-Policy" "frame-ancestors 'self';default-src https://*.ctbcbusiness.com ; script-src 'unsafe-eval' 'unsafe-inline' https://*.ctbcbusiness.com https://www.youtube.com; connect-src data: 'unsafe-inline' https://*.ctbcbusiness.com;img-src https://*.ctbcbusiness.com https://i.ytimg.com data: blob: 'unsafe-inline'; frame-src https://*.ctbcbusiness.com https://www.youtube-nocookie.com;style-src 'unsafe-inline' https://*.ctbcbusiness.com;font-src https://*.ctbcbusiness.com https://fonts.gstatic.com 'unsafe-inline';"
          HTTP::header insert "Content-Security-Policy" "frame-ancestors 'self';default-src https://*.ctbcbusiness.com ; script-src 'unsafe-eval' 'unsafe-inline' https://*.ctbcbusiness.com https://www.youtube.com; connect-src data: 'unsafe-inline' https://*.ctbcbusiness.com;img-src https://*.ctbcbusiness.com https://i.ytimg.com data: blob: 'unsafe-inline'; frame-src https://*.ctbcbusiness.com https://www.youtube-nocookie.com data:;style-src 'unsafe-inline' https://*.ctbcbusiness.com;font-src https://*.ctbcbusiness.com https://fonts.gstatic.com 'unsafe-inline';object-src data: 'self'"
          }
      if {!([HTTP::header exists "X-Frame-Options"])} {
          HTTP::header insert "X-Frame-Options" "SAMEORIGIN"
          }
      if {!([HTTP::header exists "Permissions-Policy"])} {
          HTTP::header insert "Permissions-Policy" "geolocation=(self https://*.ctbcbusiness.com), microphone=()"
          }
      if { !([ HTTP::header exists "X-XSS-Protection" ])} {
          HTTP::header insert "X-XSS-Protection" "1; mode=block"  
          }     
      if { !([ HTTP::header exists "X-Content-Type-Options" ])} {
          HTTP::header insert "X-Content-Type-Options" "nosniff"  
          }    
      if { !([ HTTP::header exists "Cache-Control" ])} {
          #HTTP::header insert "Cache-Control" "private  no-store"
          HTTP::header insert "Cache-Control" "no-store, max-age=0"
          } 
      if { !([ HTTP::header exists "Strict-Transport-Security" ])} {
          HTTP::header insert "Strict-Transport-Security" "max-age=31536000;includeSubDomains"  
          } 
      if { !([ HTTP::header exists "Referrer-Policy" ])} {
          #HTTP::header insert Referrer-Policy "no-referrer-when-downgrade"
          HTTP::header insert Referrer-Policy "strict-origin-when-cross-origin"
          }
      if { ([ HTTP::header exists "Set-Cookie" ]) } {
          set cookies [HTTP::header values "Set-Cookie"]
          HTTP::header remove "Set-Cookie"
          foreach acookie $cookies {
             HTTP::header insert "Set-Cookie" "${acookie}; Secure; HttpOnly; SameSite=Lax;"
          }
      }
}
}
ltm snat-translation /MCBC/10.23.91.108 {
    address 10.23.91.108
    inherited-traffic-group true
    traffic-group /Common/traffic-group-1
}
ltm snatpool /MCBC/SNAT_MCBC {
    members {
        /MCBC/10.23.91.108
    }
}
ltm virtual /MCBC/VS_MCBC_EXT {
    creation-time 2023-02-17:18:08:43
    destination /Common/175.184.241.239:443
    ip-protocol tcp
    last-modified-time 2023-05-05:13:56:14
    mask 255.255.255.255
    policies {
        /MCBC/asm_auto_l7_policy__VS_MCBC_EXT { }
    }
    profiles {
        /Common/HTTP_X_forward { }
        /Common/MCBC_SSL_Profile {
            context clientside
        }
        /Common/tcp { }
        /Common/websecurity { }
        /MCBC/ASM_SP_MCBC { }
        /MCBC/rewrite-mcbc { }
    }
    rules {
        /MCBC/iRule_MCBC_HTTP_HTTPS
    }
    security-log-profiles {
        /Common/Arcsight_LOG_P
        /Common/Arcsight_LOG_P_local
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    source-address-translation {
        pool /MCBC/SNAT_MCBC
        type snat
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/DMZ_Vlan_2794
    }
    vlans-enabled
}
ltm virtual /MCBC/VS_MCBC_INT {
    creation-time 2024-02-22:18:20:07
    destination /MCBC/10.23.91.108:443
    ip-protocol tcp
    last-modified-time 2024-02-23:20:13:20
    mask 255.255.255.255
    profiles {
        /Common/HTTP_X_forward { }
        /Common/MCBC_SSL_Profile {
            context clientside
        }
        /Common/tcp { }
        /MCBC/rewrite-mcbc { }
    }
    rules {
        /MCBC/iRule_MCBC_HTTP_HTTPS_OP
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    source-address-translation {
        pool /MCBC/SNAT_MCBC
        type snat
    }
    translate-address enabled
    translate-port enabled
}
ltm virtual-address /MCBC/10.23.91.108 {
    address 10.23.91.108
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm data-group internal /MCBC/MCBC_IP_ALLOW {
    records {
        10.34.81.29/32 { }
        61.63.22.0/24 { }
        175.184.240.0/21 { }
        203.66.181.0/24 { }
    }
    type ip
}
ltm profile rewrite /MCBC/rewrite-mcbc {
    app-service none
    bypass-list none
    client-caching-type cache-css-js
    defaults-from /Common/rewrite-uri-translation
    java-ca-file /Common/ca-bundle.crt
    java-crl none
    java-sign-key /Common/default.key
    java-sign-key-passphrase-encrypted $M$fn$zaPkGebDTqYMDwHTCi5RAA==
    java-signer /Common/default.crt
    location-specific false
    request {
        insert-xforwarded-for enabled
        insert-xforwarded-host disabled
        insert-xforwarded-proto disabled
        rewrite-headers enabled
    }
    response {
        rewrite-content disabled
        rewrite-headers disabled
    }
    rewrite-list none
    rewrite-mode uri-translation
    split-tunneling false
    uri-rules {
        uri_1649851933376 {
            client {
                path /mcbc/op/nonlogin/
            }
            server {
                host mcbc-op-nonlogin-3scale-apicast-production.apps.scp01.ctbcbank.com
                path /
                port 80
                scheme http
            }
        }
        uri_1649852022878 {
            client {
                path /mcbc/op/login/
            }
            server {
                host mcbc-op-login-3scale-apicast-production.apps.scp01.ctbcbank.com
                path /
                port 80
                scheme http
            }
        }
        uri_1649852039589 {
            client {
                path /mcbc/platform/
            }
            server {
                host mcbc-platform-3scale-apicast-production.apps.scp01.ctbcbank.com
                path /
                port 80
                scheme http
            }
        }
    }
}
security bot-defense asm-profile /MCBC/ASM_SP_MCBC {
    app-service none
}
