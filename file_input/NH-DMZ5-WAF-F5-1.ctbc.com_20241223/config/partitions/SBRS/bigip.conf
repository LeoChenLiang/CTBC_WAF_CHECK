#TMSH-VERSION: 17.1.1.3

asm policy /SBRS/SP_SBRS {
    active
    encoding utf-8
}
ltm node /SBRS/10.243.138.11 {
    address 10.243.138.11
}
ltm node /SBRS/10.243.138.12 {
    address 10.243.138.12
}
ltm policy /SBRS/asm_auto_l7_policy__VS_SBRS_175.184.241.240_443 {
    controls { asm }
    requires { http }
    rules {
        default {
            actions {
                1 {
                    asm
                    enable
                    policy /SBRS/SP_SBRS
                }
            }
            ordinal 1
        }
    }
    strategy /Common/first-match
}
ltm pool /SBRS/POOL_SBRS_80 {
    members {
        /SBRS/10.243.138.11:80 {
            address 10.243.138.11
            monitor /Common/tcp
        }
        /SBRS/10.243.138.12:80 {
            address 10.243.138.12
            monitor /Common/tcp
        }
    }
    monitor /Common/tcp
}
ltm pool /SBRS/POOL_SBRS_API {
    description POOL_SBRS_API
    members {
        /SBRS/10.243.138.11:9080 {
            address 10.243.138.11
            description SBRS_API_9080
            monitor /Common/tcp
        }
        /SBRS/10.243.138.12:9080 {
            address 10.243.138.12
            description SBRS_API_9080
            monitor /Common/tcp
        }
    }
    monitor /Common/tcp
}
ltm rule /SBRS/iRule_SBRS_ROUTER {
#when RULE_INIT {
# Set an HTML response to sent to clients who make a request while the VIP is over the max connection count TT
# set ::html_content_Ext_SBRS1 "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><style></style></head><body lang=ZH-TW style='text-justify-trim:punctuation'><p><b><u>&#37325;&#35201;&#20844;&#21578;</u></b></p><p>SBRS &#24179;&#21488;&#31995;&#32113;&#32173;&#35703;&#20013;&#65292;&#35531;&#31245;&#24460;&#20877;&#35430;&#65292;</p><p>&#36896;&#25104;&#19981;&#20415;&#65292;&#25964;&#35531;&#35211;&#35538;!</p><p>&nbsp;</p><p>&#20013;&#22283;&#20449;&#35351; &#25964;&#21855;</p></body></html>"
#} 

#when CLIENT_ACCEPTED {
#  if {[LB::server port] == 9444 } {
#    SSL::profile SME_SSL_SERVER
#  } 
#}

when HTTP_REQUEST {
    #2022/09/01 &#26032;&#22686;&#35215;&#21063; &#38364;&#38281;POOL &#35373;&#32622;F5 &#20572;&#27231;&#38913;&#38754;
      if { [active_members [LB::server pool]] == 0 } {
      HTTP::respond 200 content "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><style></style></head><body lang=ZH-TW style='text-justify-trim:punctuation'><p><b><u>&#37325;&#35201;&#20844;&#21578;</u></b></p><p>SBRS &#24179;&#21488;&#31995;&#32113;&#32173;&#35703;&#20013;&#65292;&#35531;&#31245;&#24460;&#20877;&#35430;&#65292;</p><p>&#36896;&#25104;&#19981;&#20415;&#65292;&#25964;&#35531;&#35211;&#35538;!</p><p>&nbsp;</p><p>&#20013;&#22283;&#20449;&#35351; &#25964;&#21855;</p></body></html>"
        } else {
		if { [HTTP::has_responded] } { return };
        HTTP::header remove Range
        HTTP::header remove Request-Range
        if {[HTTP::uri] starts_with "/content" } { 
            pool POOL_EBMW_AEM
        }elseif {[HTTP::uri] starts_with "/api/" } { 
             pool POOL_SBRS_API
        } else {
               pool POOL_SBRS_80
        }
      }
}
}
ltm rule /SBRS/iRule_sbrs_allow {
when RULE_INIT {
# Set an HTML response to sent to clients who make a request while the VIP is over the max connection count TT
  set ::html_content_Ext_SBRS "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><style></style></head><body lang=ZH-TW style='text-justify-trim:punctuation'><p><b><u>&#37325;&#35201;&#20844;&#21578;</u></b></p><p>SBRS &#32218;&#19978;&#30003;&#36024;&#24179;&#21488;&#31995;&#32113;&#32173;&#35703;&#20013;&#65292;&#35531;&#31245;&#24460;&#20877;&#35430;&#65292;</p><p>&#36896;&#25104;&#19981;&#20415;&#65292;&#25964;&#35531;&#35211;&#35538;!</p><p>&nbsp;</p><p>&#20013;&#22283;&#20449;&#35351;&#25964;&#21855;</p></body></html>"
} 

when HTTP_REQUEST {
  if { ( ![class match [IP::client_addr] equals iRule_sbrs_allow] )} {
     #HTTP::redirect "https://google.com.tw"
      HTTP::respond 200 content $::html_content_Ext_SBRS
  }
}
}
ltm rule /SBRS/iRule_sbrs_header {
when HTTP_RESPONSE_RELEASE {
	if { [HTTP::has_responded] } { return };
   # HTTP::header remove "Set-Cookie"

  set myValues [HTTP::cookie names]
  foreach mycookies $myValues {
#      log local0. "Cookie Name: $mycookies being secured."
    if { [HTTP::cookie version $mycookies] != 1 } {
      set ckval [HTTP::cookie value $mycookies]
      set ckpath [HTTP::cookie path $mycookies]
      HTTP::cookie remove $mycookies
      HTTP::cookie insert name $mycookies value $ckval path $ckpath version 1
    }
    HTTP::cookie secure $mycookies enable
    HTTP::cookie httponly $mycookies enable
    HTTP::cookie attribute $mycookies insert {SameSite=None}
      #HTTP::cookie SameSite=None $mycookies enable
  }

    #Strict-Transport-Security
      if {([HTTP::header exists "Strict-Transport-Security"])} {
            HTTP::header remove "Strict-Transport-Security"
        }
        HTTP::header insert "Strict-Transport-Security" "max-age=31536000; includeSubDomains"

    #X-Frame-Options
      if {([HTTP::header exists "X-Frame-Options"])} {
        HTTP::header remove "X-Frame-Options"
        }
      HTTP::header insert "X-Frame-Options" "DENY"

    #X-Content-Type-Options
      if {([HTTP::header exists "X-Content-Type-Options"])} {
        HTTP::header remove "X-Content-Type-Options"
        }
      HTTP::header insert "X-Content-Type-Options" "nosniff"

      #Content-Security-Policy
      if {([HTTP::header exists "Content-Security-Policy"])} {
        HTTP::header remove "Content-Security-Policy"
       }
      HTTP::header insert "Content-Security-Policy" "default-src 'self'; script-src 'self' ; object-src 'self' ; connect-src 'self' ; img-src 'self' data: blob: ; frame-src 'self' data: blob:; style-src 'self' 'unsafe-inline' ; frame-ancestors 'self'"

    #Referrer-Policy
       if {([HTTP::header exists "Referrer-Policy"])} {
        HTTP::header remove "Referrer-Policy"
        }
       HTTP::header insert "Referrer-Policy" "strict-origin-when-cross-origin"

      #Permissions-Policy
       if {([HTTP::header exists "Permissions-Policy"])} {
        HTTP::header remove "Permissions-Policy"       
        }
        HTTP::header insert "Permissions-Policy" "camera=(), fullscreen=(), geolocation=(), microphone=(), payment=()"

    #Cache-Control     
      if {([HTTP::header exists "Cache-Control"])} {
        HTTP::header remove "Cache-Control"       
        }
	  HTTP::header insert "Cache-Control" "no-store,max-age=0, no-cache=\"set-cookie, set-cookie2\" "



  #  if {!([HTTP::header exists "X-Frame-Options" ])} {
  #      HTTP::header insert "X-Frame-Options" "DENY"
  #  }

  #  if {!([HTTP::header exists "X-XSS-Protection"])} {
  #      HTTP::header insert "X-XSS-Protection" "1; mode=block"
  #  }

  #  if {!([HTTP::header exists "X-Content-Type-Options"])} {
  #      HTTP::header insert "X-Content-Type-Options" "nosniff"
  #  }



   #  if {!([HTTP::header exists "Strict-Transport-Security"])} {
   #    HTTP::header insert "Strict-Transport-Security" "max-age=31449600; includeSubDomains"
   # }


    #if {!([HTTP::header exists "Feature-Policy"])} {
    #    HTTP::header insert "Feature-Policy" "microphone 'none'; geolocation 'none'; camera 'none'"
    #}
    #  HTTP::header remove "Content-Security-Policy"
    #if {!([HTTP::header exists "Content-Security-Policy"])} {
       #HTTP::header remove "Content-Security-Policy"
       #HTTP::header insert "content-security-policy" "default-src 'self' 'unsafe-inline' 'unsafe-eval' https://smeapptest.ctbcbank.com:* ; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://smeapptest.ctbcbank.com:*; connect-src 'self' ; img-src 'self' data: ; style-src 'self' 'unsafe-inline' ; object-src 'none' ; frame-src 'self' 'unsafe-inline' 'unsafe-eval' https://smeapptest.ctbcbank.com:* ; font-src 'self'"
       #HTTP::header insert "Content-Security-Policy" "default-src * script-src * 'unsafe-inline' 'unsafe-eval'; connect-src * 'unsafe-inline'; img-src * data: blob: 'unsafe-inline'; frame-src * data: blob:; style-src * 'unsafe-inline'; frame-ancestors 'self'"
       #HTTP::header insert "content-security-policy" "object-src 'none'; script-src 'self'; script-src-elem 'self'; base-uri 'self'; require-trusted-types-for 'script'"
   # }

   # if {!([HTTP::header exists "X-Auth-Token"])} {

      # HTTP::header insert "X-Auth-Token" "55"
       #HTTP::header insert "Content-Security-Policy" "default-src * script-src * 'unsafe-inline' 'unsafe-eval'; connect-src * 'unsafe-inline'; img-src * data: blob: 'unsafe-inline'; frame-src * data: blob:; style-src * 'unsafe-inline'; frame-ancestors 'self'"
       #HTTP::header insert "content-security-policy" "object-src 'none'; script-src 'self'; script-src-elem 'self'; base-uri 'self'; require-trusted-types-for 'script'"
  # }

}
}
ltm snat-translation /SBRS/10.23.91.109 {
    address 10.23.91.109
    inherited-traffic-group true
    traffic-group /Common/traffic-group-1
}
ltm snatpool /SBRS/SNAT_SBRS {
    members {
        /SBRS/10.23.91.109
    }
}
ltm virtual /SBRS/VS_SBRS_175.184.241.240_443 {
    destination /SBRS/175.184.241.240:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/cookie_insert_sbrs {
            default yes
        }
    }
    policies {
        /SBRS/asm_auto_l7_policy__VS_SBRS_175.184.241.240_443 { }
    }
    pool /SBRS/POOL_SBRS_80
    profiles {
        /Common/HTTP_X_forward { }
        /Common/SBRS_SSL {
            context clientside
        }
        /Common/tcp { }
        /Common/websecurity { }
        /SBRS/ASM_SP_SBRS { }
    }
    rules {
        /Common/iRule_SlowAttack_Protection
        /SBRS/iRule_SBRS_ROUTER
        /SBRS/iRule_sbrs_header
    }
    security-log-profiles {
        /Common/Arcsight_LOG_P
        /Common/Arcsight_LOG_P_local
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    source-address-translation {
        pool /SBRS/SNAT_SBRS
        type snat
    }
    translate-address enabled
    translate-port enabled
}
ltm virtual-address /SBRS/175.184.241.240 {
    address 175.184.241.240
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm data-group internal /SBRS/iRule_sbrs_allow {
    records {
        101.10.56.157/32 {
            data User1
        }
        111.71.45.38/32 {
            data CLEE
        }
    }
    type ip
}
security bot-defense asm-profile /SBRS/ASM_SP_SBRS {
    app-service none
}
